unit UDAO;

interface

uses RTTI, FireDAC.Comp.Client;

type

  TDAO = class
  private
    procedure ConfigParametro(AQuery: TFDQuery; AProp: TRttiProperty; ACampo: string;  ATabela: TObject);
    { private declarations }
  public
    function Excluir(ATabela: TObject): Integer;
    function Inserir(ATabela: TObject): Integer;
    function Salvar(ATabela: TObject): Integer;

    function InTransaction: Boolean;
    procedure StartTransaction;
    procedure Commit;
    procedure RollBack;

    { public declarations }
  end;

implementation

uses
  UAtributos, UDM, System.SysUtils;

{ TDAO }

procedure TDAO.Commit;
begin
  dm.FDTransaction1.Commit;
end;

procedure TDAO.ConfigParametro(AQuery: TFDQuery; AProp: TRttiProperty;
  ACampo: string; ATabela: TObject);
begin
  with AQuery do
  begin
    case AProp.PropertyType.TypeKind of
      tkInt64,
      tkInteger:
      begin
        Params.ParamByName(ACampo).AsInteger := AProp.GetValue(ATabela).AsInteger;
      end;
      tkChar,
      tkString,
      tkUString:
      begin
        Params.ParamByName(ACampo).AsString := AProp.GetValue(ATabela).AsString;
      end;
      tkFloat:
      begin
         Params.ParamByName(ACampo).AsCurrency := AProp.GetValue(ATabela).AsCurrency;
      end;
      tkVariant:
      begin
        Params.ParamByName(ACampo).AsCurrency := AProp.GetValue(ATabela).AsVariant;
      end;
    else
      raise Exception.Create('Tipo de campo não conhecido: ' + AProp.PropertyType.ToString);
    end;
  end;
end;

function TDAO.Excluir(ATabela: TObject): Integer;
var
  NomeTab: string;
  CamposPk: TResultArray;
  Sep: string;
  Campo: string;

  Contexto : TRttiContext;
  TipoRtti : TRttiType;
  PropRtti : TRttiProperty;
begin
  NomeTab  := PegaNomeTab(ATabela);

  CamposPk := PegaPks(ATabela);

  Contexto  := TRttiContext.Create;
  try
    TipoRtti := Contexto.GetType( ATabela.ClassType );

    with dm.Qry do
    begin
      close;
      SQL.Clear;
      sql.Add('Delete from ' + NomeTab);
      sql.Add('Where');

      Sep := '';
      for Campo in CamposPk do
      begin
        sql.Add(Sep+ Campo + '= :' + Campo);
        Sep := ' and ';

        for PropRtti in TipoRtti.GetProperties do
          if CompareText(PropRtti.Name, Campo) = 0 then
            begin
              ConfigParametro(dm.Qry, PropRtti, Campo, ATabela);
            end;
      end;

      Prepare();
      ExecSQL;
      Result := RowsAffected;
    end;
  finally
    Contexto.free;
  end;
end;

function TDAO.Inserir(ATabela: TObject): Integer;
var
  Campo: string;
  Sep: string;
  Contexto: TRttiContext;
  TipoRtti: TRttiType;
  PropRtti: TRttiProperty;
begin
  Contexto  := TRttiContext.Create;
  try
    TipoRtti := Contexto.GetType( ATabela.ClassType );
    with dm.Qry do
    begin
      sql.Add('Insert into ' + PegaNomeTab(ATabela));
      sql.Add('(');

      Sep := '';
      for PropRtti in TipoRtti.GetProperties do
      begin
        SQL.Add(Sep + PropRtti.Name);
        Sep := ',';
      end;
      sql.Add(')');


      sql.Add('Values (');
      Sep := '';
      for PropRtti in TipoRtti.GetProperties do
      begin
        SQL.Add(Sep + ':' + PropRtti.Name);
        Sep := ',';
      end;
      sql.Add(')');

      for PropRtti in TipoRtti.GetProperties do
      begin
        Campo := PropRtti.Name;
        ConfigParametro(dm.Qry, PropRtti, Campo, ATabela);
      end;
      Prepare();
      ExecSQL;
      Result := RowsAffected;
    end;
  finally
    Contexto.free;
  end;
end;

procedure TDAO.RollBack;
begin
  dm.FDTransaction1.Rollback;
end;

function TDAO.Salvar(ATabela: TObject): Integer;
var
  Campo: string;
  Sep: string;
  Contexto: TRttiContext;
  TipoRtti: TRttiType;
  PropRtti: TRttiProperty;
  CamposPk: TResultArray;
begin
  Contexto  := TRttiContext.Create;
  try
    TipoRtti := Contexto.GetType( ATabela.ClassType );
    CamposPk := PegaPks(ATabela);
    with dm.Qry do
    begin
      sql.Add('Update ' + PegaNomeTab(ATabela));
      sql.Add('set');

      Sep := '';
      for PropRtti in TipoRtti.GetProperties do
      begin
        SQL.Add(Sep + PropRtti.Name + '=:'+PropRtti.Name);
        Sep := ',';
      end;
      sql.Add('where');

      Sep := '';
      for Campo in CamposPk do
      begin
        sql.Add(Sep+ Campo + '= :' + Campo);
        Sep := ' and ';
      end;

      for PropRtti in TipoRtti.GetProperties do
      begin
        Campo := PropRtti.Name;
        ConfigParametro(dm.Qry, PropRtti, Campo, ATabela);
      end;

      Prepare();
      ExecSQL;
      Result := RowsAffected;
    end;
  finally
    Contexto.free;
  end;
end;

procedure TDAO.StartTransaction;
begin
  dm.FDTransaction1.StartTransaction;
end;

end.
